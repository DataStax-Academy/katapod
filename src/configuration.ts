/*
Loading, parsing, validating (and supplying well-informed defaults for) the Katapod configuration.
*/

import * as vscode from 'vscode';
const path = require('path');
const fs = require('fs');

import {getWorkingDir} from './filesystem';
import {log} from './logging';

const kpConfigFileName = '.katapod_config.json';
const kpDefaultStartupScript = 'wait.sh';
const kpDefaultTerminalName = 'cqlsh-editor';
const kpDefaultTerminalID = 'cqlsh';
const kpDefaultIntroStepName = 'intro';

export function readKatapodConfig(): Promise<any> {
	/*
    Return a complete config object, either from file or with defaults.
	- If the config file is found, it is:
		loaded,
		validated
		and returned scrupolously.
	- If it's not found, a fallback to backward compatibility is done, with
		a default config (one-terminal, legacy naming etc)
		and further settings depending on educated guessed from the scenario content (such as whether "wait.sh" exists, etc)
    */
	const cfgP = new Promise<any>((resolve) => {
		//
		const kpConfigFileURI = vscode.Uri.file(path.join(getWorkingDir(), kpConfigFileName));
		vscode.workspace.fs.stat(kpConfigFileURI).then(
			function(){
				log('debug', '[readKatapodConfig] Reading config file');
				let cfgFromFile;
				try {
					cfgFromFile = JSON.parse(fs.readFileSync(kpConfigFileURI.path, 'utf8'));
				} catch {
					log('error', '[readKatapodConfig] Unparseable config file');
					cfgFromFile = {};
				}
				resolve(cfgFromFile);
			},
			function () {
				log('debug', '[readKatapodConfig] Config file not found');
				const staticDefaultKpConfig = {
					layout: {
						terminals: [
							{
								id: kpDefaultTerminalID,
								name: kpDefaultTerminalName,
							},
						]
					},
					
				};
				// check if the default startup script exists and adjust the constructed config
				const kpStartupScriptFileURI = vscode.Uri.file(path.join(getWorkingDir(), kpDefaultStartupScript));
				let cfgAutogenerated;
				vscode.workspace.fs.stat(kpStartupScriptFileURI).then(
					function(){
						log('debug', '[readKatapodConfig] Default init script found');
						cfgAutogenerated = {
							...staticDefaultKpConfig,
							...{
								navigation: {
									onLoadCommands: {
										[kpDefaultIntroStepName]: {
											[kpDefaultTerminalID]: `./${kpDefaultStartupScript};`
										}
									}
								}
							}
						};
						resolve(cfgAutogenerated);
					},
					function(){
						log('debug', '[readKatapodConfig] Default init script not found');
						cfgAutogenerated = {
							...staticDefaultKpConfig,
						};
						resolve(cfgAutogenerated);
					}
				);
			}
		);
	});

	return cfgP;
}
